# watch TheyLive
# your code here
# Load the user data
# movie_ratings_df = ['UserId', 'Age', 'x', 'x', 'ZipCode', 'MovieId', 'Title', 'Rating'])
# u = gb.get_group(363)
# u[['Title', 'Rating']][:10]
--------------------------------------------------------------------------------------
import subprocess
subprocess.call(['pip', 'install', 'pandas'])
subprocess.call(['pip', 'install', 'numpy'])
import pandas as pd
import heapq
import math
--------------------------------------------------------------------------------------
# Jaccard
# Rating union and intersection weighted by star difference
def rat_union(rat1, rat2):
    return len(rat1) + sum(0.2*abs(rat1.get(m, rat2[m]-5) - rat2[m]) for m in rat2)

def rat_intersect(rat1, rat2):
    return sum(1 - 0.2*abs(rat1.get(m, rat2[m]+5) - rat2[m]) for m in rat2)

def jaccard(uid, request=10):
    me_data = gb.get_group(uid)
    me_like = me_data[['MovieId','Rating']].set_index('MovieId')['Rating'].to_dict()
    heap = [] # Heap of the top #'request' elements
    for u,ur_data in gb:
        if u == uid: continue
        u_like = ur_data[['MovieId','Rating']].set_index('MovieId')['Rating'].to_dict()
        jac_score = rat_intersect(me_like, u_like) / rat_union(me_like, u_like)
        if len(heap) < request:
            heapq.heappush(heap, (jac_score, u))
        elif jac_score > heap[0][0]:
            heapq.heappushpop(heap, (jac_score, u))
    heap.sort(reverse=True)
    return heap

# Print users similar to user 363
for similar in jaccard(363):
    print("{:.9f} - user:{:03}".format(similar[0], similar[1]))
--------------------------------------------------------------------------------------
# Cosine
# Dot product and Magnitude for movie rating vectors
def dot_prod(rat1, rat2):
    return sum(rat1.get(m, 0)*rat2[m] for m in rat2)

def magn(rat):
    return math.sqrt(sum(rat[m]**2 for m in rat))

def cosine(uid, request=10):
    me_data = gb.get_group(uid)
    me_like = me_data[['MovieId','Rating']].set_index('MovieId')['Rating'].to_dict()
    heap = [] # Heap of the top #'request' elements
    for u,ur_data in gb:
        if u == uid: continue
        u_like = ur_data[['MovieId','Rating']].set_index('MovieId')['Rating'].to_dict()
        cos_score = dot_prod(me_like, u_like) / (magn(me_like)*magn(u_like))
        if len(heap) < request:
            heapq.heappush(heap, (cos_score, u))
        elif cos_score > heap[0][0]:
            heapq.heappushpop(heap, (cos_score, u))
    heap.sort(reverse=True)
    return heap

# Print users similar to user 363
for similar in cosine(363):
    print("{:.9f} - user:{:03}".format(similar[0], similar[1]))
--------------------------------------------------------------------------------------
# Pearson
def std_wrt(rat1, rat2):
    isect = rat1.keys() & rat2.keys()
    if len(isect) < 2: return 1
    std1 = stdev(rat1[m] for m in rat1 if m in rat2)
    std2 = stdev(rat2[m] for m in rat2 if m in rat1)
    std_mult = std1*std2
    return 1 if std_mult == 0 else std_mult

def covariance(rat1, rat2):
    isect = rat1.keys() & rat2.keys()
    if len(isect) == 0: return 0
    avg1 = sum(rat1[m] if m in rat2 else 0 for m in rat1)/len(isect)
    avg2 = sum(rat2[m] if m in rat1 else 0 for m in rat2)/len(isect)
    #print(len(isect), avg1, avg2)
    return sum((rat1.get(m,avg1)-avg1)*(rat2[m]-avg2) for m in rat2)/len(isect)

def pearson(uid, request=10):
    me_data = gb.get_group(uid)
    me_like = me_data[['MovieId','Rating']].set_index('MovieId')['Rating'].to_dict()
    heap = [] # Heap of the top #'request' elements
    for u,ur_data in gb:
        if u == uid: continue
        u_like = ur_data[['MovieId','Rating']].set_index('MovieId')['Rating'].to_dict()
        pea_score = covariance(me_like, u_like) / std_wrt(me_like, u_like)
        if len(heap) < request:
            heapq.heappush(heap, (pea_score, u))
        elif pea_score > heap[0][0]:
            heapq.heappushpop(heap, (pea_score, u))
    heap.sort(reverse=True)
    return heap

# Print users similar to user 363
for similar in pearson(363):
    print("{:.9f} - user:{:03}".format(similar[0], similar[1]))
--------------------------------------------------------------------------------------
0.278445006 - user:276
0.262081784 - user:293
0.261770245 - user:435
0.256660746 - user:301
0.254002134 - user:429
0.253692762 - user:092
0.252059308 - user:916
0.251931994 - user:561
0.250000000 - user:268
0.249521623 - user:896

0.603857486 - user:276
0.530818760 - user:864
0.529114652 - user:435
0.522761738 - user:303
0.522502505 - user:429
0.518805777 - user:896
0.512385644 - user:092
0.511879910 - user:682
0.510761576 - user:497
0.510252840 - user:222

0.269867397 - user:276
0.208027127 - user:889
0.204050740 - user:092
0.197552792 - user:293
0.190429526 - user:435
0.182419957 - user:758
0.179706735 - user:007
0.179420224 - user:268
0.176710693 - user:013
0.171415983 - user:643

